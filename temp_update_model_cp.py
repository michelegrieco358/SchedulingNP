from pathlib import Path
path = Path(r"c:\Users\Utente\Desktop\Skyline\shift-scheduling\src\model_cp.py")
lines = path.read_text(encoding="utf-8").splitlines()
start = next(i for i, line in enumerate(lines) if line.strip().startswith("self.emp_skills = {str(emp_id): set(skills)"))
end = next(i for i in range(start, len(lines)) if lines[i].strip() == "self.window_demands = {}")
new_block = [
    "        self.emp_skills = {str(emp_id): set(skills) for emp_id, skills in (emp_skills or {}).items()}",
    "        valid_shift_ids = set(self.shifts[\"shift_id\"].astype(str)) if \"shift_id\" in self.shifts.columns else set()",
    "",
    "        cleaned_shift_skills: dict[str, dict[str, int]] = {}",
    "        for shift_id, requirements in (shift_skill_requirements or {}).items():",
    "            sid = str(shift_id)",
    "            if valid_shift_ids and sid not in valid_shift_ids:",
    "                continue",
    "            if not isinstance(requirements, Mapping):",
    "                continue",
    "            cleaned_req: dict[str, int] = {}",
    "            for skill_name, quantity in requirements.items():",
    "                try:",
    "                    qty_int = int(quantity)",
    "                except (TypeError, ValueError):",
    "                    logger.warning(",
    "                        \"Shift {}: requisito skill '{}' non numerico ({}), ignoro\".format(",
    "                            sid,",
    "                            skill_name,",
    "                            quantity,",
    "                        )",
    "                    )",
    "                    continue",
    "                if qty_int <= 0:",
    "                    continue",
    "                cleaned_req[str(skill_name)] = qty_int",
    "            if cleaned_req:",
    "                cleaned_shift_skills[sid] = cleaned_req",
    "        self.shift_skill_requirements = cleaned_shift_skills",
    "",
    "        cleaned_window_skills: dict[str, dict[str, int]] = {}",
    "        for window_id, requirements in (window_skill_requirements or {}).items():",
    "            if not isinstance(requirements, Mapping):",
    "                continue",
    "            cleaned_req: dict[str, int] = {}",
    "            wid = str(window_id)",
    "            for skill_name, quantity in requirements.items():",
    "                try:",
    "                    qty_int = int(quantity)",
    "                except (TypeError, ValueError):",
    "                    logger.warning(",
    "                        \"Finestra {}: requisito skill '{}' non numerico ({}), ignoro\".format(",
    "                            wid,",
    "                            skill_name,",
    "                            quantity,",
    "                        )",
    "                    )",
    "                    continue",
    "                if qty_int <= 0:",
    "                    continue",
    "                cleaned_req[str(skill_name)] = qty_int",
    "            if cleaned_req:",
    "                cleaned_window_skills[wid] = cleaned_req",
    "        self.window_skill_requirements = cleaned_window_skills",
    "",
    "        self.using_window_skills = bool(self.window_skill_requirements)",
    "        self.using_shift_skills = bool(self.shift_skill_requirements) and not self.using_window_skills",
    "        if self.using_window_skills and self.shift_skill_requirements:",
    "            logger.info(",
    "                \"Requisiti skill definiti sulle finestre rilevati: ignoro quelli definiti sui turni.\"",
    "            )",
    "",
    "        self.window_demands = {}",
]
lines = lines[:start] + new_block + lines[end+1:]
path.write_text("\n".join(lines) + "\n", encoding="utf-8")
